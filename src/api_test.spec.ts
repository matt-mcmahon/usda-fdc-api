/**
 * Food Data Central API
 * The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("FDCApi", () => {
  let instance: api.FDCApi
  beforeEach(function() {
    instance = new api.FDCApi(config)
  });

  test("getFood", () => {
    const fdcId: string = "fdcId_example"
    const format: string = "format_example"
    const nutrients: Array<number> = undefined
    return expect(instance.getFood(fdcId, format, nutrients, {})).resolves.toBe(null)
  })
  test("getFoods", () => {
    const fdcIds: Array<string> = undefined
    const format: string = "format_example"
    const nutrients: Array<number> = undefined
    return expect(instance.getFoods(fdcIds, format, nutrients, {})).resolves.toBe(null)
  })
  test("getFoodsList", () => {
    const dataType: Array<string> = undefined
    const pageSize: number = 56
    const pageNumber: number = 56
    const sortBy: string = "sortBy_example"
    const sortOrder: string = "sortOrder_example"
    return expect(instance.getFoodsList(dataType, pageSize, pageNumber, sortBy, sortOrder, {})).resolves.toBe(null)
  })
  test("getFoodsSearch", () => {
    const query: string = "query_example"
    const dataType: Array<string> = undefined
    const pageSize: number = 56
    const pageNumber: number = 56
    const sortBy: string = "sortBy_example"
    const sortOrder: string = "sortOrder_example"
    const brandOwner: string = "brandOwner_example"
    return expect(instance.getFoodsSearch(query, dataType, pageSize, pageNumber, sortBy, sortOrder, brandOwner, {})).resolves.toBe(null)
  })
  test("getJsonSpec", () => {
    return expect(instance.getJsonSpec({})).resolves.toBe(null)
  })
  test("getYamlSpec", () => {
    return expect(instance.getYamlSpec({})).resolves.toBe(null)
  })
  test("postFoods", () => {
    const body: api.FoodsCriteria = undefined
    return expect(instance.postFoods(body, {})).resolves.toBe(null)
  })
  test("postFoodsList", () => {
    const body: api.FoodListCriteria = undefined
    return expect(instance.postFoodsList(body, {})).resolves.toBe(null)
  })
  test("postFoodsSearch", () => {
    const body: api.FoodSearchCriteria = undefined
    return expect(instance.postFoodsSearch(body, {})).resolves.toBe(null)
  })
})

